services:
  unit-tests:
    build:
      context: .
      dockerfile: Dockerfile
      target: unit-tests
      args:
        - DOCKER_BUILD_TARGET=unit-tests
    command: >
      sh -c "py.test"

  sut:
    build:
      context: .
      dockerfile: Dockerfile
      target: integration-tests
      args:
        - PYTHON_DOCKER_IMAGE_TAG=3.14-slim
        - DOCKER_BUILD_TARGET=integration-tests
    environment:
      - CI=1
      - PYTEST_CACHE_DIR=.pytest_cache
      - SITE_DOMAIN=app.flask-jsonrpc.cenobit.es
      - SITE_PORT=80
      - WEB_URL=https://app.flask-jsonrpc.cenobit.es
      - API_URL=https://app.flask-jsonrpc.cenobit.es/api
      - BROWSABLE_API_URL=https://app.flask-jsonrpc.cenobit.es/api/browse
    user: ${UID:-0}:${GID:-0}
    volumes:
      - .pytest_cache/test-results/app:/app/test-results
      - .pytest_cache/screnshots/app:/app/.pytest_cache/screnshots
    depends_on:
      app:
        condition: service_healthy
      nginx:
        condition: service_healthy
    networks:
      - default

  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: app
      args:
        - DOCKER_BUILD_TARGET=app
    environment:
      - FLASK_PREFERRED_URL_SCHEME=https
      - FLASK_SERVER_NAME=app.flask-jsonrpc.cenobit.es
    user: ${UID:-0}:${GID:-0}
    command: >
      python -m app
    ports:
      - '5000:5000'
    networks:
      - default
    healthcheck:
      test: wget -qO - app:5000/health || exit 1
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s

  nginx:
    image: nginx:mainline-alpine
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - .docker/nginx/ssl:/etc/nginx/ssl
      - .docker/nginx/conf.d/app.flask-jsonrpc.cenobit.es.conf:/etc/nginx/nginx.conf
    depends_on:
      app:
        condition: service_healthy
    networks:
      default:
        aliases:
          - app.flask-jsonrpc.cenobit.es
    healthcheck:
      test: wget -qO - nginx:80/health || exit 1
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s

  async-sut:
    build:
      context: .
      dockerfile: Dockerfile
      target: integration-tests
      args:
        - PYTHON_DOCKER_IMAGE_TAG=3.14-slim
        - DOCKER_BUILD_TARGET=integration-tests
    environment:
      - CI=1
      - PYTEST_CACHE_DIR=.pytest_cache
      - SITE_DOMAIN=async-app.flask-jsonrpc.cenobit.es
      - SITE_PORT=80
      - WEB_URL=https://async-app.flask-jsonrpc.cenobit.es
      - API_URL=https://async-app.flask-jsonrpc.cenobit.es/api
      - BROWSABLE_API_URL=https://async-app.flask-jsonrpc.cenobit.es/api/browse
    user: ${UID:-0}:${GID:-0}
    command: >
      ./wait-for-it.sh async-app.flask-jsonrpc.cenobit.es:80 -t 600 -- py.test -vv --tb=short --junitxml=test-results/junit.xml
    volumes:
      - .pytest_cache/test-results/async-app:/app/test-results
      - .pytest_cache/screnshots/async-app:/app/.pytest_cache/screnshots
    depends_on:
      async-app:
        condition: service_healthy
      async-nginx:
        condition: service_healthy
    networks:
      - default

  async-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: app
      args:
        - DOCKER_BUILD_TARGET=app
    environment:
      - FLASK_PREFERRED_URL_SCHEME=https
      - FLASK_SERVER_NAME=async-app.flask-jsonrpc.cenobit.es
    user: ${UID:-0}:${GID:-0}
    command: >
      python -m async_app
    ports:
      - '5001:5000'
    networks:
      - default
    healthcheck:
      test: wget -qO - async-app:5000/health || exit 1
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s

  async-nginx:
    image: nginx:mainline-alpine
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - .docker/nginx/ssl:/etc/nginx/ssl
      - .docker/nginx/conf.d/async-app.flask-jsonrpc.cenobit.es.conf:/etc/nginx/nginx.conf
    depends_on:
      async-app:
        condition: service_healthy
    networks:
      default:
        aliases:
          - async-app.flask-jsonrpc.cenobit.es
    healthcheck:
      test: wget -qO - async-nginx:80/health || exit 1
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s

  mypyc-sut:
    build:
      context: .
      dockerfile: Dockerfile
      target: integration-tests
      args:
        - PYTHON_DOCKER_IMAGE_TAG=3.14-slim
        - DOCKER_BUILD_TARGET=integration-tests
    environment:
      - CI=1
      - PYTEST_CACHE_DIR=.pytest_cache
      - SITE_DOMAIN=mypyc-app.flask-jsonrpc.cenobit.es
      - SITE_PORT=80
      - WEB_URL=https://mypyc-app.flask-jsonrpc.cenobit.es
      - API_URL=https://mypyc-app.flask-jsonrpc.cenobit.es/api
      - BROWSABLE_API_URL=https://mypyc-app.flask-jsonrpc.cenobit.es/api/browse
    user: ${UID:-0}:${GID:-0}
    volumes:
      - .pytest_cache/test-results/app:/app/test-results
      - .pytest_cache/screnshots/app:/app/.pytest_cache/screnshots
    depends_on:
      mypyc-nginx:
        condition: service_healthy
    networks:
      - default

  mypyc-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: app
      args:
        - DOCKER_BUILD_TARGET=mypyc-app
    environment:
      - FLASK_PREFERRED_URL_SCHEME=https
      - FLASK_SERVER_NAME=mypyc-app.flask-jsonrpc.cenobit.es
    user: ${UID:-0}:${GID:-0}
    command: >
      python -m app
    ports:
      - '5002:5000'
    networks:
      - default
    healthcheck:
      test: wget -qO - mypyc-app:5000/health || exit 1
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s

  mypyc-nginx:
    image: nginx:mainline-alpine
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - .docker/nginx/ssl:/etc/nginx/ssl
      - .docker/nginx/conf.d/mypyc-app.flask-jsonrpc.cenobit.es.conf:/etc/nginx/nginx.conf
    depends_on:
      mypyc-app:
        condition: service_healthy
    networks:
      default:
        aliases:
          - mypyc-app.flask-jsonrpc.cenobit.es
    healthcheck:
      test: wget -qO - mypyc-nginx:80/health || exit 1
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s

networks:
  default:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.host_binding_ipv4: "172.20.0.1"
      com.docker.network.driver.mtu: "1500"
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
